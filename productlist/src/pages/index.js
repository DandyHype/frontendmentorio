import Head from "next/head";
import Image from "next/image";
import localFont from "next/font/local";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";

const redhat = localFont({
  src: "./fonts/RedHatText-VariableFont_wght.ttf",
  variable: "--font-redhat",
  weight: "100 900",
});

const Plussvg = () => (<svg className={styles.plus_svg} xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 10 10"><path d="M10 4.375H5.625V0h-1.25v4.375H0v1.25h4.375V10h1.25V5.625H10v-1.25Z"/></svg>) 
const Minussvg = () => (<svg className={styles.minus_svg} xmlns="http://www.w3.org/2000/svg" width="10" height="2" fill="none" viewBox="0 0 10 2"><path d="M0 .375h10v1.25H0V.375Z"/></svg>)
const Crosssvg = () => (<svg className={styles.cross_svg} xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 10 10"><path d="M8.375 9.375 5 6 1.625 9.375l-1-1L4 5 .625 1.625l1-1L5 4 8.375.625l1 1L6 5l3.375 3.375-1 1Z"/></svg>)

export default function Home() {
  const [myCart, setMyCart] = useState(new Map());
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [counter, setCounter] = useState(0);
  const [ordered, setOrdered] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch("/data.json");
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        const data = await response.json();
        setData(data);
      } catch (err) {
        setError(`Error: ${err.message}`);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>{error}</div>;

  function updateQuantity(id, action) {
    setMyCart((prevCart) => {
      const newCart = new Map(prevCart);

      const quantity = newCart.get(id) || 0;

      if (action === "increase") {
        setCounter(counter + 1);
        newCart.set(id, quantity + 1);
        newCart.set('total', (newCart.get('total') || 0) + data[id].price);
      } else if (action === "decrease" && quantity > 0) {
        setCounter(counter - 1);
        newCart.set(id, quantity - 1);
        newCart.set('total', (newCart.get('total') || 0) + data[id].price);
      }

      return newCart;
    });
  }

  function handleRemoveFromCart(id) {
    setMyCart((prevCart) => {
      const newCart = new Map(prevCart);
      setCounter(counter - newCart.get(id));
      newCart.set('total', (newCart.get('total') || 0) - (data[id].price * newCart.get(id)));
      newCart.set(id, 0);

      return newCart;
    });
  }

  function handleOrder(){
    setOrdered(true);
  }
  
  function handleResetOrder(){
    setCounter(0);
    setOrdered(false);
    setMyCart((prevCart) => {
      const newCart = new Map();
      return newCart;
    });
  }

  return (
    <>
      <Head>
        <title>Frontend Mentor | Product list with cart</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="assets/images/favicon-32x32.png"
        />
      </Head>

      <ProductsContainer
        data={data}
        myCart={myCart}
        updateQuantity={updateQuantity}
      ></ProductsContainer>
      <Cart
        data={data}
        myCart={myCart}
        counter={counter}
        handleRemoveFromCart={handleRemoveFromCart}
        handleOrder={handleOrder}
      ></Cart>
      {ordered?(<OrderConfirmationModal data={data} myCart={myCart} handleResetOrder={handleResetOrder}></OrderConfirmationModal>):(<></>)}
    </>
  );
}

function ToCartButton({ id, myCart, updateQuantity }) {
  const quantity = myCart.get(id) || 0;

  if (quantity < 1) {
    return (
      <div
        className={styles.addToCartBtn}
        onClick={() => updateQuantity(id, "increase")}
      >
        <Image
          src={"assets/images/icon-add-to-cart.svg"}
          width={21}
          height={20}
          alt="Shopping Cart Icon"
        ></Image>
        <p className={`${styles.btn_description} ${redhat.variable}`}>
          Add to Cart
        </p>
      </div>
    );
  }

  if (quantity > 0) {
    return (
      <div
        className={`${styles.addToCartBtn} ${styles["addToCartBtn-active"]}`}
      >
        <div
          className={styles.sign_container}
          onClick={() => updateQuantity(id, "decrease")}
        >
          <Minussvg></Minussvg>
        </div>
        <p
          className={`${styles.btn_description} ${redhat.variable} ${styles.product_quantity}`}
        >
          {quantity}
        </p>
        <div
          className={styles.sign_container}
          onClick={() => updateQuantity(id, "increase")}
        >
          <Plussvg></Plussvg>
        </div>
      </div>
    );
  }
}

function ProductCard({ myProd, id, myCart, updateQuantity }) {
  return (
    <article className={styles.product_container}>
      <picture className={styles.product_picture} style={{ border : myCart.get(id) > 0 ? '1px solid #C73B0F': '1px solid transparent'}}>
        <source media="(min-width: 1300px)" srcSet={myProd.image.desktop} />
        <source media="(min-width: 780px)" srcSet={myProd.image.tablet} />
        <img
          className={styles.picture_img}
          src={myProd.image.mobile}
          alt="Image description"
        />
      </picture>
      <ToCartButton
        id={id}
        myCart={myCart}
        updateQuantity={updateQuantity}
      ></ToCartButton>
      <p className={`${styles.product_cat} ${redhat.variable}`}>
        {myProd.category}
      </p>
      <p className={`${styles.product_name} ${redhat.variable}`}>
        {myProd.name}
      </p>
      <p className={`${styles.product_price} ${redhat.variable}`}>
        ${myProd.price.toFixed(2)}
      </p>
    </article>
  );
}

function ProductsContainer({ data, myCart, updateQuantity }) {
  return (
    <main className={styles.products_container}>
      <h1 className={`${styles.list_title} ${redhat.variable}`}>Desserts</h1>
      <section className={styles.products_list}>
        {data.map((prod, index) => (
          <ProductCard
            key={index}
            myProd={prod}
            id={index}
            myCart={myCart}
            updateQuantity={updateQuantity}
          ></ProductCard>
        ))}
      </section>
    </main>
  );
}

function Cart({ data, myCart, counter, handleRemoveFromCart, handleOrder }) {
  return (
    <aside className={styles.cart_container}>
      <h2 className={`${styles.cart_title} ${redhat.variable}`}>
        Your Cart ({counter})
      </h2>
      <div className={styles.cart_products}>
        {counter < 1 ? (
          <>
            <object
              type="image/svg+xml"
              className={styles.cart_emptyimg}
              data="/assets/images/illustration-empty-cart.svg"
            ></object>
            <p className={`${styles.cart_description} ${redhat.variable}`}>
              Your added items will appear here
            </p>
          </>
        ) : (
          <>
            <div style={{width: `100%`}}>
              {Array.from(myCart).map(([index, qty]) => (
                index !== 'total' && (<CartItem
                  key={index}
                  data={data}
                  id={index}
                  qty={qty}
                  handleRemoveFromCart={handleRemoveFromCart}
                ></CartItem>)
              ))}
            </div>
            <div className={styles.cart_price}>
              <p className={`${styles.cart_total} ${redhat.variable}`}>
                Order Total
              </p>
              <span className={`${styles.total_price} ${redhat.variable}`}>
                {myCart.get('total').toFixed(2)}
              </span>
            </div>
            <div className={styles.carbon_neutral}>
              <img src="/assets/images/icon-carbon-neutral.svg"></img>
              <p className={`${styles.carbon_message} ${redhat.variable}`}>
                This is a <strong>carbon-neutral</strong> delivery
              </p>
            </div>
            <button
              className={`${styles.confirm_btn} ${redhat.variable}`}
              onClick={() => handleOrder()}
            >
              Confirm Order
            </button>
          </>
        )}
      </div>
    </aside>
  );
}

function CartItem({ data, qty, id, handleRemoveFromCart }) {
  if (qty > 0) {
    return (
      <div className={styles.cartitem_container}>
        <p className={`${styles.cartitem_name} ${redhat.variable}`}>
          {data[id].name}
        </p>
        <div>
          <span
            className={`${styles.cartitem_mult} ${redhat.variable}`}
          >{`${qty}x`}</span>
          <span
            className={`${styles.cartitem_price} ${redhat.variable}`}
          >{`@ ${data[id].price.toFixed(2)}`}</span>
          <span className={`${styles.cartitem_subtotal} ${redhat.variable}`}>
            ${(qty * data[id].price).toFixed(2)}
          </span>
        </div>
        <div
          className={styles.crosssvg_container}
          onClick={() => handleRemoveFromCart(id)}
        >
          <Crosssvg></Crosssvg>
        </div>
      </div>
    );
  }
}

function OrderConfirmationModal({data, myCart, handleResetOrder}) {
  return (
    <div className={`${styles.modal_background} ${redhat.variable}`} onClick={handleResetOrder}>
      <div className={`${styles.modal_container} ${styles.animatedfrombottom}`} >
        <div className={styles.modal_confiramation}>
          <img
            className={styles.modal_checksvg}
            src="/assets/images/icon-order-confirmed.svg"
          ></img>
          <div className={styles.confirmation_description}>
            <h1 className={styles.confiramation_title}>Order Confirmed</h1>
            <p className={styles.confirmation_subtitle}>
              We hope you enjoy your food!
            </p>
          </div>
        </div>
        <div className={styles.order_description}>
          <div className={styles.order_items}>
          {Array.from(myCart).map(([index, qty]) => (
                index !== 'total' && ( <OrderItem
                  key={index}
                  data={data}
                  id={index}
                  qty={qty}
                ></OrderItem>)
              ))}
            
          </div>
          <div className={styles.order_total}>
            <p className={styles.total_title}>Order Total</p>
            <p className={styles.total_price}>{myCart.get('total').toFixed(2)}</p>
          </div>
        </div>

        <button className={styles.neworder_btn} onClick={handleResetOrder}>Start New Order</button>
      </div>
    </div>
  );
}

function OrderItem({data, qty, id}) {
  return (
    <div className={styles.item}>
      <div className={styles.item_description}>
        <div className={styles.item_imgcontainer}>
          <img
            className={styles.item_img}
            src={data[id].image.thumbnail}
          ></img>
        </div>
        <div className={styles.item_details}>
          <p className={styles.item_name}>{data[id].name}</p>
          <div className={styles.item_qty}>
            <p className={styles.item_mult}>{`${qty}x`}</p>
            <p className={styles.item_price}>{`@ ${data[id].price.toFixed(2)}`}</p>
          </div>
        </div>
      </div>
      <div className={styles.item_totalprice}>${(qty * data[id].price).toFixed(2)}</div>
    </div>
  );
}
